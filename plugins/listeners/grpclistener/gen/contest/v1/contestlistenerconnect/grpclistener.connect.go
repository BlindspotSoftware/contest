// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: contest/v1/grpclistener.proto

package contestlistenerconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	contestlistener "github.com/linuxboot/contest/plugins/listeners/grpclistener/contestlistener"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ConTestServiceName is the fully-qualified name of the ConTestService service.
	ConTestServiceName = "contest.v1.ConTestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConTestServiceStartJobProcedure is the fully-qualified name of the ConTestService's StartJob RPC.
	ConTestServiceStartJobProcedure = "/contest.v1.ConTestService/StartJob"
	// ConTestServiceStatusJobProcedure is the fully-qualified name of the ConTestService's StatusJob
	// RPC.
	ConTestServiceStatusJobProcedure = "/contest.v1.ConTestService/StatusJob"
)

// ConTestServiceClient is a client for the contest.v1.ConTestService service.
type ConTestServiceClient interface {
	StartJob(context.Context, *connect_go.Request[contestlistener.StartJobRequest]) (*connect_go.Response[contestlistener.StartJobResponse], error)
	StatusJob(context.Context, *connect_go.Request[contestlistener.StatusJobRequest]) (*connect_go.ServerStreamForClient[contestlistener.StatusJobResponse], error)
}

// NewConTestServiceClient constructs a client for the contest.v1.ConTestService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConTestServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ConTestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &conTestServiceClient{
		startJob: connect_go.NewClient[contestlistener.StartJobRequest, contestlistener.StartJobResponse](
			httpClient,
			baseURL+ConTestServiceStartJobProcedure,
			opts...,
		),
		statusJob: connect_go.NewClient[contestlistener.StatusJobRequest, contestlistener.StatusJobResponse](
			httpClient,
			baseURL+ConTestServiceStatusJobProcedure,
			opts...,
		),
	}
}

// conTestServiceClient implements ConTestServiceClient.
type conTestServiceClient struct {
	startJob  *connect_go.Client[contestlistener.StartJobRequest, contestlistener.StartJobResponse]
	statusJob *connect_go.Client[contestlistener.StatusJobRequest, contestlistener.StatusJobResponse]
}

// StartJob calls contest.v1.ConTestService.StartJob.
func (c *conTestServiceClient) StartJob(ctx context.Context, req *connect_go.Request[contestlistener.StartJobRequest]) (*connect_go.Response[contestlistener.StartJobResponse], error) {
	return c.startJob.CallUnary(ctx, req)
}

// StatusJob calls contest.v1.ConTestService.StatusJob.
func (c *conTestServiceClient) StatusJob(ctx context.Context, req *connect_go.Request[contestlistener.StatusJobRequest]) (*connect_go.ServerStreamForClient[contestlistener.StatusJobResponse], error) {
	return c.statusJob.CallServerStream(ctx, req)
}

// ConTestServiceHandler is an implementation of the contest.v1.ConTestService service.
type ConTestServiceHandler interface {
	StartJob(context.Context, *connect_go.Request[contestlistener.StartJobRequest]) (*connect_go.Response[contestlistener.StartJobResponse], error)
	StatusJob(context.Context, *connect_go.Request[contestlistener.StatusJobRequest], *connect_go.ServerStream[contestlistener.StatusJobResponse]) error
}

// NewConTestServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConTestServiceHandler(svc ConTestServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ConTestServiceStartJobProcedure, connect_go.NewUnaryHandler(
		ConTestServiceStartJobProcedure,
		svc.StartJob,
		opts...,
	))
	mux.Handle(ConTestServiceStatusJobProcedure, connect_go.NewServerStreamHandler(
		ConTestServiceStatusJobProcedure,
		svc.StatusJob,
		opts...,
	))
	return "/contest.v1.ConTestService/", mux
}

// UnimplementedConTestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConTestServiceHandler struct{}

func (UnimplementedConTestServiceHandler) StartJob(context.Context, *connect_go.Request[contestlistener.StartJobRequest]) (*connect_go.Response[contestlistener.StartJobResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("contest.v1.ConTestService.StartJob is not implemented"))
}

func (UnimplementedConTestServiceHandler) StatusJob(context.Context, *connect_go.Request[contestlistener.StatusJobRequest], *connect_go.ServerStream[contestlistener.StatusJobResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("contest.v1.ConTestService.StatusJob is not implemented"))
}
